plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
}

android {
    namespace 'com.xinqi.aiildo'
    compileSdk 36

    defaultConfig {
        applicationId "com.xinqi.aiildo"
        minSdk 24
        targetSdk 36
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // 从local.properties读取配置
        buildConfigField "String", "LLM_DOUBAO_API_KEY", "\"${getProperty('llm.doubao.apiKey', '')}\""
        buildConfigField "String", "TTS_RIRIXIN_AK", "\"${getProperty('tts.ririxin.ak', '')}\""
        buildConfigField "String", "TTS_RIRIXIN_SK", "\"${getProperty('tts.ririxin.sk', '')}\""
        buildConfigField "String", "TTS_MINIMAX_GROUP_ID", "\"${getProperty('tts.minimax.grouID', '')}\""
        buildConfigField "String", "TTS_MINIMAX_API_KEY", "\"${getProperty('tts.minimax.apiKey', '')}\""

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
        freeCompilerArgs += [
            "-Xskip-metadata-version-check"
        ]
    }
    
    buildFeatures {
        compose true
        buildConfig true
    }
    
    composeOptions {
        kotlinCompilerExtensionVersion "1.5.10"
    }
    
    lint {
        disable 'Deprecation'
    }
}

dependencies {
    implementation project(':ui')
    implementation project(':utils')

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    
    // Compose dependencies
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    implementation libs.androidx.activity.compose
    implementation libs.androidx.lifecycle.viewmodel.compose
    
    // Compose debug
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
    
    // Coroutines
    implementation libs.kotlinx.coroutines.android
}

// 读取local.properties中的属性
def getProperty(String propertyName, String defaultValue) {
    def localProperties = new Properties()
    def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
    
    if (localPropertiesFile.exists()) {
        localProperties.load(new FileInputStream(localPropertiesFile))
        def propertyValue = localProperties.getProperty(propertyName)
        println "DEBUG: Reading property '$propertyName' from local.properties = '$propertyValue'"
        
        if (propertyValue == null || propertyValue.trim().isEmpty()) {
            println "DEBUG: Property '$propertyName' is null or empty, using default: '$defaultValue'"
            propertyValue = defaultValue
        }
        return propertyValue
    } else {
        println "DEBUG: local.properties file not found, using default: '$defaultValue'"
        return defaultValue
    }
}